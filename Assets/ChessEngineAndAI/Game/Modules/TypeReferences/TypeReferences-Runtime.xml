<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TypeReferences-Runtime</name>
    </assembly>
    <members>
        <member name="T:TypeReferences.ClassGrouping">
            <summary>
            Indicates how selectable classes should be collated in drop-down menu.
            </summary>
        </member>
        <member name="F:TypeReferences.ClassGrouping.None">
            <summary>
            No grouping, just show type names in a list; for instance, "Some.Nested.Namespace.SpecialClass".
            </summary>
        </member>
        <member name="F:TypeReferences.ClassGrouping.ByNamespace">
            <summary>
            Group classes by namespace and show foldout menus for nested namespaces; for
            instance, "Some > Nested > Namespace > SpecialClass".
            </summary>
        </member>
        <member name="F:TypeReferences.ClassGrouping.ByNamespaceFlat">
            <summary>
            Group classes by namespace; for instance, "Some.Nested.Namespace > SpecialClass".
            </summary>
        </member>
        <member name="F:TypeReferences.ClassGrouping.ByAddComponentMenu">
            <summary>
            Group classes in the same way as Unity does for its component menu. This
            grouping method must only be used for <see cref="T:UnityEngine.MonoBehaviour"/> types.
            </summary>
        </member>
        <member name="T:TypeReferences.ClassTypeConstraintAttribute">
            <summary>
            Base class for class selection constraints that can be applied when selecting
            a <see cref="T:TypeReferences.ClassTypeReference"/> with the Unity inspector.
            </summary>
        </member>
        <member name="P:TypeReferences.ClassTypeConstraintAttribute.Grouping">
            <summary>
            Gets or sets grouping of selectable classes. Defaults to <see cref="F:TypeReferences.ClassGrouping.ByNamespaceFlat"/>
            unless explicitly specified.
            </summary>
        </member>
        <member name="P:TypeReferences.ClassTypeConstraintAttribute.AllowAbstract">
            <summary>
            Gets or sets whether abstract classes can be selected from drop-down.
            Defaults to a value of <c>false</c> unless explicitly specified.
            </summary>
        </member>
        <member name="M:TypeReferences.ClassTypeConstraintAttribute.IsConstraintSatisfied(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type"/> satisfies filter constraint.
            </summary>
            <param name="type">Type to test.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value indicating if the type specified by <paramref name="type"/>
            satisfies this constraint and should thus be selectable.
            </returns>
        </member>
        <member name="T:TypeReferences.ClassExtendsAttribute">
            <summary>
            Constraint that allows selection of classes that extend a specific class when
            selecting a <see cref="T:TypeReferences.ClassTypeReference"/> with the Unity inspector.
            </summary>
        </member>
        <member name="M:TypeReferences.ClassExtendsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TypeReferences.ClassExtendsAttribute"/> class.
            </summary>
        </member>
        <member name="M:TypeReferences.ClassExtendsAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:TypeReferences.ClassExtendsAttribute"/> class.
            </summary>
            <param name="baseType">Type of class that selectable classes must derive from.</param>
        </member>
        <member name="P:TypeReferences.ClassExtendsAttribute.BaseType">
            <summary>
            Gets the type of class that selectable classes must derive from.
            </summary>
        </member>
        <member name="M:TypeReferences.ClassExtendsAttribute.IsConstraintSatisfied(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:TypeReferences.ClassImplementsAttribute">
            <summary>
            Constraint that allows selection of classes that implement a specific interface
            when selecting a <see cref="T:TypeReferences.ClassTypeReference"/> with the Unity inspector.
            </summary>
        </member>
        <member name="M:TypeReferences.ClassImplementsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TypeReferences.ClassImplementsAttribute"/> class.
            </summary>
        </member>
        <member name="M:TypeReferences.ClassImplementsAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:TypeReferences.ClassImplementsAttribute"/> class.
            </summary>
            <param name="interfaceType">Type of interface that selectable classes must implement.</param>
        </member>
        <member name="P:TypeReferences.ClassImplementsAttribute.InterfaceType">
            <summary>
            Gets the type of interface that selectable classes must implement.
            </summary>
        </member>
        <member name="M:TypeReferences.ClassImplementsAttribute.IsConstraintSatisfied(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:TypeReferences.ClassTypeReference">
            <summary>
            Reference to a class <see cref="T:System.Type"/> with support for Unity serialization.
            </summary>
        </member>
        <member name="M:TypeReferences.ClassTypeReference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TypeReferences.ClassTypeReference"/> class.
            </summary>
        </member>
        <member name="M:TypeReferences.ClassTypeReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TypeReferences.ClassTypeReference"/> class.
            </summary>
            <param name="assemblyQualifiedClassName">Assembly qualified class name.</param>
        </member>
        <member name="M:TypeReferences.ClassTypeReference.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:TypeReferences.ClassTypeReference"/> class.
            </summary>
            <param name="type">Class type.</param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="type"/> is not a class type.
            </exception>
        </member>
        <member name="P:TypeReferences.ClassTypeReference.Type">
            <summary>
            Gets or sets type of class reference.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> is not a class type.
            </exception>
        </member>
    </members>
</doc>
