// <auto-generated/>

// Crest Water System
// Copyright Â© 2024 Wave Harmonic. All rights reserved.

using UnityEngine;
using WaveHarmonic.Crest.Utility;

namespace WaveHarmonic.Crest
{
    [AddComponentMenu(Constants.k_MenuPrefixInputs + "Albedo Input")]
    [@FilterEnum(nameof(_Mode), Filtered.Mode.Include, (int)LodInputMode.Renderer)]
    partial class AlbedoLodInput
    {
        public override Color GizmoColor => AlbedoLod.s_GizmoColor;
        private protected override SortedList<int, ILodInput> Inputs => AlbedoLod.s_Inputs;
    }

    [ForLodInput(typeof(AlbedoLodInput), LodInputMode.Renderer)]
    [System.Serializable]
    sealed partial class AlbedoRendererLodInputData : RendererLodInputData
    {
        internal override string ShaderPrefix => "Crest/Inputs/Albedo";
    }

    [AddComponentMenu(Constants.k_MenuPrefixInputs + "Animated Waves Input")]
    [@FilterEnum(nameof(_Mode), Filtered.Mode.Include, (int)LodInputMode.Renderer)]
    partial class AnimatedWavesLodInput
    {
        public override Color GizmoColor => AnimatedWavesLod.s_GizmoColor;
        private protected override SortedList<int, ILodInput> Inputs => AnimatedWavesLod.s_Inputs;
    }

    [ForLodInput(typeof(AnimatedWavesLodInput), LodInputMode.Renderer)]
    [System.Serializable]
    sealed partial class AnimatedWavesRendererLodInputData : RendererLodInputData
    {
        internal override string ShaderPrefix => "Crest/Inputs/Animated Waves";
    }

    [AddComponentMenu(Constants.k_MenuPrefixInputs + "Clip Input")]
    [@FilterEnum(nameof(_Mode), Filtered.Mode.Include, (int)LodInputMode.Renderer, (int)LodInputMode.Texture, (int)LodInputMode.Paint, (int)LodInputMode.Primitive)]
    partial class ClipLodInput
    {
        public override Color GizmoColor => ClipLod.s_GizmoColor;
        private protected override SortedList<int, ILodInput> Inputs => ClipLod.s_Inputs;
    }

    [ForLodInput(typeof(ClipLodInput), LodInputMode.Texture)]
    [System.Serializable]
    sealed partial class ClipTextureLodInputData : TextureLodInputData
    {
        protected override ComputeShader TextureShader => WaterResources.Instance.Compute._ClipTexture;
    }

    [ForLodInput(typeof(ClipLodInput), LodInputMode.Renderer)]
    [System.Serializable]
    sealed partial class ClipRendererLodInputData : RendererLodInputData
    {
        internal override string ShaderPrefix => "Crest/Inputs/Clip";
    }

    [AddComponentMenu(Constants.k_MenuPrefixInputs + "Depth Input")]
    [@FilterEnum(nameof(_Mode), Filtered.Mode.Include, (int)LodInputMode.Renderer, (int)LodInputMode.Texture)]
    partial class DepthLodInput
    {
        public override Color GizmoColor => DepthLod.s_GizmoColor;
        private protected override SortedList<int, ILodInput> Inputs => DepthLod.s_Inputs;
    }

    [ForLodInput(typeof(DepthLodInput), LodInputMode.Texture)]
    [System.Serializable]
    sealed partial class DepthTextureLodInputData : TextureLodInputData
    {
        protected override ComputeShader TextureShader => WaterResources.Instance.Compute._DepthTexture;
    }

    [ForLodInput(typeof(DepthLodInput), LodInputMode.Renderer)]
    [System.Serializable]
    sealed partial class DepthRendererLodInputData : RendererLodInputData
    {
        internal override string ShaderPrefix => "Crest/Inputs/Depth";
    }

    [AddComponentMenu(Constants.k_MenuPrefixInputs + "Dynamic Waves Input")]
    [@FilterEnum(nameof(_Mode), Filtered.Mode.Include, (int)LodInputMode.Renderer)]
    partial class DynamicWavesLodInput
    {
        public override Color GizmoColor => DynamicWavesLod.s_GizmoColor;
        private protected override SortedList<int, ILodInput> Inputs => DynamicWavesLod.s_Inputs;
    }

    [ForLodInput(typeof(DynamicWavesLodInput), LodInputMode.Renderer)]
    [System.Serializable]
    sealed partial class DynamicWavesRendererLodInputData : RendererLodInputData
    {
        internal override string ShaderPrefix => "Crest/Inputs/Dynamic Waves";
    }

    [AddComponentMenu(Constants.k_MenuPrefixInputs + "Flow Input")]
    [@FilterEnum(nameof(_Mode), Filtered.Mode.Include, (int)LodInputMode.Renderer, (int)LodInputMode.Texture, (int)LodInputMode.Paint, (int)LodInputMode.Spline)]
    partial class FlowLodInput
    {
        public override Color GizmoColor => FlowLod.s_GizmoColor;
        private protected override SortedList<int, ILodInput> Inputs => FlowLod.s_Inputs;
    }

    [ForLodInput(typeof(FlowLodInput), LodInputMode.Texture)]
    [System.Serializable]
    sealed partial class FlowTextureLodInputData : DirectionalTextureLodInputData
    {
        protected override ComputeShader TextureShader => WaterResources.Instance.Compute._FlowTexture;
    }

    [ForLodInput(typeof(FlowLodInput), LodInputMode.Renderer)]
    [System.Serializable]
    sealed partial class FlowRendererLodInputData : RendererLodInputData
    {
        internal override string ShaderPrefix => "Crest/Inputs/Flow";
    }

    [AddComponentMenu(Constants.k_MenuPrefixInputs + "Foam Input")]
    [@FilterEnum(nameof(_Mode), Filtered.Mode.Include, (int)LodInputMode.Renderer, (int)LodInputMode.Texture, (int)LodInputMode.Paint, (int)LodInputMode.Spline)]
    partial class FoamLodInput
    {
        public override Color GizmoColor => FoamLod.s_GizmoColor;
        private protected override SortedList<int, ILodInput> Inputs => FoamLod.s_Inputs;
    }

    [ForLodInput(typeof(FoamLodInput), LodInputMode.Texture)]
    [System.Serializable]
    sealed partial class FoamTextureLodInputData : TextureLodInputData
    {
        protected override ComputeShader TextureShader => WaterResources.Instance.Compute._FoamTexture;
    }

    [ForLodInput(typeof(FoamLodInput), LodInputMode.Renderer)]
    [System.Serializable]
    sealed partial class FoamRendererLodInputData : RendererLodInputData
    {
        internal override string ShaderPrefix => "Crest/Inputs/Foam";
    }

    [AddComponentMenu(Constants.k_MenuPrefixInputs + "Level Input")]
    [@FilterEnum(nameof(_Mode), Filtered.Mode.Include, (int)LodInputMode.Renderer, (int)LodInputMode.Texture, (int)LodInputMode.Paint, (int)LodInputMode.Spline)]
    partial class LevelLodInput
    {
        public override Color GizmoColor => LevelLod.s_GizmoColor;
        private protected override SortedList<int, ILodInput> Inputs => LevelLod.s_Inputs;
    }

    [ForLodInput(typeof(LevelLodInput), LodInputMode.Texture)]
    [System.Serializable]
    sealed partial class LevelTextureLodInputData : TextureLodInputData
    {
        protected override ComputeShader TextureShader => WaterResources.Instance.Compute._LevelTexture;
    }

    [ForLodInput(typeof(LevelLodInput), LodInputMode.Renderer)]
    [System.Serializable]
    sealed partial class LevelRendererLodInputData : RendererLodInputData
    {
        internal override string ShaderPrefix => "Crest/Inputs/Level";
    }

    [AddComponentMenu(Constants.k_MenuPrefixInputs + "Shadow Input")]
    [@FilterEnum(nameof(_Mode), Filtered.Mode.Include, (int)LodInputMode.Renderer)]
    partial class ShadowLodInput
    {
        public override Color GizmoColor => ShadowLod.s_GizmoColor;
        private protected override SortedList<int, ILodInput> Inputs => ShadowLod.s_Inputs;
    }

    [ForLodInput(typeof(ShadowLodInput), LodInputMode.Renderer)]
    [System.Serializable]
    sealed partial class ShadowRendererLodInputData : RendererLodInputData
    {
        internal override string ShaderPrefix => "Crest/Inputs/Shadow";
    }

    [AddComponentMenu(Constants.k_MenuPrefixInputs + "Shape Waves Input")]
    [@FilterEnum(nameof(_Mode), Filtered.Mode.Include, (int)LodInputMode.Renderer, (int)LodInputMode.Texture, (int)LodInputMode.Paint, (int)LodInputMode.Spline, (int)LodInputMode.Global)]
    partial class ShapeWaves
    {
        public override Color GizmoColor => AnimatedWavesLod.s_GizmoColor;
        private protected override SortedList<int, ILodInput> Inputs => AnimatedWavesLod.s_Inputs;
    }

    [ForLodInput(typeof(ShapeWaves), LodInputMode.Texture)]
    [System.Serializable]
    sealed partial class ShapeWavesTextureLodInputData : DirectionalTextureLodInputData
    {
        protected override ComputeShader TextureShader => WaterResources.Instance.Compute._ShapeWavesTransfer;
    }

    [ForLodInput(typeof(ShapeWaves), LodInputMode.Renderer)]
    [System.Serializable]
    sealed partial class ShapeWavesRendererLodInputData : RendererLodInputData
    {
        internal override string ShaderPrefix => "Crest/Inputs/Shape Waves";
    }
}
